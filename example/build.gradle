apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    dataBinding {
        enabled = true
    }
    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        String sharedResources = 'src/sharedTest/resources'
        test {
            java.srcDirs += sharedTestDir
            resources.srcDirs += sharedResources
        }
        androidTest {
            java.srcDirs += sharedTestDir
            resources.srcDirs += sharedResources
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        release {
            storeFile file("C:/Users/Andy/.android/test.keystore")
            storePassword "testtest"
            keyAlias "test"
            keyPassword "testtest"
        }
    }
    defaultConfig {
        applicationId "dagger.extension.example"
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "dagger.extension.example.runner.EspressoTestRunner"
        signingConfig signingConfigs.release
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

configurations {

    [testCompile, androidTestCompile].each {
        it.extendsFrom commonTestCompile
    }
    [androidTestAnnotationProcessor, testAnnotationProcessor].each {
        it.extendsFrom commonTestAnnotationProcessor
    }
}

dependencies {

    //compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:appcompat-v7:26.0.0-beta2'
    compile 'com.android.support:design:26.0.0-beta2'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    compile 'com.google.dagger:dagger:3.0'
    compile 'com.google.dagger:dagger-android:3.0'
    compile 'com.google.dagger:dagger-android-support:3.0'
    annotationProcessor 'com.google.dagger:dagger-compiler:3.0'
    annotationProcessor 'com.google.dagger:dagger-android-compiler:3.0'
    androidTestCompile 'com.google.dagger:dagger-android-testcase:3.0'
    commonTestAnnotationProcessor 'com.google.dagger:dagger-decoder:3.0'

    /*compile files('libs/dagger-modified.jar')
    compile files('libs/dagger-android-modified.jar')
    compile(name: 'dagger-android-support-modified', ext: 'aar')
    annotationProcessor 'com.google.guava:guava:20.0'
    annotationProcessor files('libs/dagger-producers-modified.jar')
    annotationProcessor files('libs/dagger-compiler-modified.jar')
    annotationProcessor files('libs/dagger-android-compiler-modified.jar')
    androidTestCompile(name: 'dagger-android-testcase', ext: 'aar')
    commonTestAnnotationProcessor files('libs/dagger-decoder.jar')*/

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.3.2'
    testCompile 'org.robolectric:shadows-support-v4:3.3.2'
    testCompile 'org.mockito:mockito-core:2.6.2'
    androidTestCompile 'org.mockito:mockito-android:2.6.2'
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile 'com.linkedin.testbutler:test-butler-library:1.3.1'

    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    compile 'javax.inject:javax.inject:1'
    compile 'javax.annotation:javax.annotation-api:1.2'
    compile 'com.android.support:appcompat-v7:26.0.0-beta2'
    compile 'com.android.support:design:26.0.0-beta2'
    compile 'com.android.support:cardview-v7:26.0.0-beta2'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.jakewharton:butterknife:8.5.1'
    provided 'com.google.auto.factory:auto-factory:1.0-beta5'
    annotationProcessor 'com.google.auto.factory:auto-factory:1.0-beta5'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
}

afterEvaluate {
    android.buildTypes.all { variant ->
        android.sourceSets.test.java.srcDirs += ("$buildDir/generated/source/apt/test/${variant.name}")
        if (variant.name == "debug") {
            android.sourceSets.androidTest.java.srcDirs += ("$buildDir/generated/source/apt/androidTest/${variant.name}")
        }
    }
}

afterEvaluate {
    android.buildTypes.all { variant ->
        if (variant.name == "debug") {
            def name = variant.name.capitalize()
            def integration = "compile${name}AndroidTestJavaWithJavac"
            def unit = "compile${name}UnitTestJavaWithJavac"
            def unitTestGenerateClassesTask = tasks.findByName(unit)
            def integrationTestGenerateClassesTask = tasks.findByName(integration)
            def g = "assemble${name}"
            def generateClassesTask = tasks.findByName(g)
            if (generateClassesTask != null && unitTestGenerateClassesTask != null) {
                generateClassesTask.dependsOn unitTestGenerateClassesTask
                generateClassesTask.dependsOn integrationTestGenerateClassesTask
            }
        }
    }

}

android.applicationVariants.all { variant ->

    def isEmulator = {
        return android.os.Build.FINGERPRINT.startsWith("generic");
    }

    if (variant.name == "debug") {
        task "installTestButlerForDebugAndroidTest" {
            doFirst {
                exec {
                    if (!isEmulator()) {
                        return;
                    }
                    try{
                        def adb = android.getAdbExe().toString()
                        commandLine adb, "wait-for-device"
                        commandLine adb, "install", "-r", "test-butler-app-1.3.1.apk"
                    }catch(Exception e) {}
                }
            }
        }

        task "uninstallTestButlerForDebugAndroidTest" {

            doFirst {
                exec {
                    if (!isEmulator()) {
                        return;
                    }
                    try {
                        def adb = android.getAdbExe().toString()
                        commandLine adb, "wait-for-device"
                        commandLine adb, "uninstall", "com.linkedin.android.testbutler"
                    }catch(Exception e) {}
                }
            }
        }

    }
}