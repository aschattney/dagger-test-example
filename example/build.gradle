apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    dataBinding {
        enabled = true
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test {
            java.srcDirs += sharedTestDir
        }
        androidTest {
            java.srcDirs += sharedTestDir
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "dagger.extension.example"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "dagger.extension.example.runner.EspressoTestRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {

    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'

    compile files('libs/dagger-fork.jar')
    compile files('libs/dagger-android-fork.jar')
    compile (name: 'dagger-android-support-fork', ext: 'aar')
    annotationProcessor 'com.google.guava:guava:20.0'
    annotationProcessor files('libs/dagger-producers-fork.jar')
    annotationProcessor files('libs/dagger-compiler-fork.jar')
    annotationProcessor files('libs/dagger-android-compiler-fork.jar')
    androidTestAnnotationProcessor files('libs/dagger-decoder-fork.jar')
    androidTestCompile (name: 'dagger-android-testcase-fork', ext: 'aar')
    testAnnotationProcessor files('libs/dagger-decoder-fork.jar')

    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.3.2'
    testCompile 'org.robolectric:shadows-support-v4:3.3.2'
    testCompile 'org.mockito:mockito-core:2.2.0'
    androidTestCompile 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'javax.inject:javax.inject:1'
    compile 'javax.annotation:javax.annotation-api:1.2'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.jakewharton:butterknife:8.5.1'

    provided 'com.google.auto.factory:auto-factory:1.0-beta5'
    annotationProcessor 'com.google.auto.factory:auto-factory:1.0-beta5'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
}

afterEvaluate {
    android.buildTypes.all { variant ->
        android.sourceSets.test.java.srcDirs += ("$buildDir/generated/source/apt/test/$variant.name")
        android.sourceSets.androidTest.java.srcDirs += ("$buildDir/generated/source/apt/androidTest/$variant.name")
    }
}

afterEvaluate {
    android.buildTypes.all { variant ->
        def u = "compile${variant.name.capitalize()}UnitTestJavaWithJavac"
        def unitTestGenerateClassesTask = tasks.findByName(u)
        def g = "assemble${variant.name.capitalize()}"
        def generateClassesTask = tasks.findByName(g)
        if (generateClassesTask != null && unitTestGenerateClassesTask != null)
            generateClassesTask.dependsOn unitTestGenerateClassesTask
    }
}